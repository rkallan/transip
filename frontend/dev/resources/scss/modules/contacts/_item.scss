.contact-item {
  &.wrapper {
    position: relative;
    flex: 2;
    @include setPropWithRemAndPx(20, (padding: 20, padding-bottom: 130));
    .container {
      position: flex;
      &[variant~="contact-button"] {
        .unit {
          flex-direction: row-reverse;
          li {
            a,
            button {
              @include setPropWithRemAndPx(160, width);
            }
          }
        }
      }
    }
    .contact-form[method="post"] {
      [variant~="hide-contact-add"] {
        display: none;
      }
    }
    fieldset {
      [variant~="name-inputfield"] {
        display: block;
        @include opacity(1);
        @extend %visuallyShow;
        transition: all 0.3s ease;
      }
      [variant~="name-label"] {
        display: none;
        @include opacity(0);
        @extend %visuallyhidden;
        transition: all 0.3s ease;
      }
      &[disabled] {
        [variant~="name-inputfield"] {
          display: none;
          @include opacity(0);
          @extend %visuallyhidden;
        }
        [variant~="name-label"] {
          display: block;
          @include opacity(1);
          @extend %visuallyShow;
        }
      }
    }
  }
  &.container {
    &[variant~="contact-item-header"] {
      display: flex;
      flex-direction: row;
      align-items: center;
      margin-bottom: 0;
      [variant~="contact-item-name"] {
        position: relative;
        .input {
          &.container {
            margin-top: 0;
            margin-bottom: 0;
            transition: all 0.3s ease;
            label {
              color: $color-gray-darker;
              @include setPropWithRemAndPx(7, margin-right);
            }
            &[variant~="name-label"] {
              position: absolute;
              display: flex;
              flex-direction: row;
              align-items: center;
              top: 0;
              bottom: 0;
              width: 100%;
              height: 100%;
              margin: 0;
              box-sizing: border-box;
              @include setPropWithRemAndPx(20, padding-left);
            }
          }
        }
      }
    }
    &[variant~="contact-item-body-container"] {
      display: flex;
      flex-direction: column;
      @include setPropWithRemAndPx(20, padding-bottom);
      border-bottom: 2px solid darken( $color-gray-lighter, 10%);
      &.is-last {
        border-bottom: 0;
      }
    }
  }
  &.unit {
    @include setPropWithRemAndPx(10, (margin));
    &[variant~="contact-item-avatar"] {
      @include setPropWithRemAndPx(120, (min-width, min-height, max-height, max-width));
      border-radius: 100%;
      overflow: hidden;
      .image {
        max-width: 100%;
        max-height: 100%;
        transition: all 0.3s ease;
      }
    }
    &[variant~="contact-item-body"] {
      display: flex;
      flex-direction: row;
      align-items: center;
      &.is-last {
        margin-bottom: 0;
        border-bottom: 0;
      }
    }
    &[variant~="contact-item-name"] {
      flex: auto;
    }
    &[variant="contact-item-favorite"] {
      @include setPropWithRemAndPx(50, (min-width, height));
      .icon {
        @include setPropWithRemAndPx(50, (width, height));
        svg {
          width: 100%;
          height: 100%;
        }
      }
    }
  }
}
