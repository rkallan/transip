.contact-button {
  &[variant~="contact-button"] {
    &.container {
      position: fixed;
      right: 0;
      bottom: 0;
      width: 0;
      @include setPropWithRemAndPx($buttonContainerContact, (height));
      z-index: 10;
      background-color: $color-gray-darker;
      margin: 0;
    }
  }
  &[variant~="button-back"] {
    &.container {
      top: 0;
      bottom: unset;
      width: 0;
      @include setPropWithRemAndPx($buttonContainerBackContact, (height));
      .unit {
        flex-direction: row;
        li {
          a,
          button {
            flex-direction: row;
            .icon {
              margin-bottom: 0;
              svg {
                transform: rotate(180deg);
                path, rect {
                  fill: $color-white;
                }
              }
            }
          }
          
        }
      }
    }
  }
  &.unit {
    position: absolute;
    display: flex;
    flex-direction: row;
    align-items: center;
    height: 100%;
    width: 100%;
    transition: all 0.3s ease;
    li {
      height: 100%;
      @include setPropWithRemAndPx(130, (max-width)); 
      &.flex-auto {
        flex: auto;
        max-width: unset;
      }
      a,
      button {
        @include setPropWithRemAndPx(18, (font-size));
        display: flex;
        flex-flow: column wrap;
        justify-content: center;
        align-content: center;
        align-items: center;
        text-align: center;
        height: 100%;
        width: 100%;
        color: $color-white;
        transition: all 0.3s ease;
        border: 0;
        background: transparent;
        font-family: $fontFamily;
        .icon {
          transition: all 0.3s ease;
          text-align: center;
          width: 40px;
          height: 40px;
          @include setPropWithRemAndPx(map-get($grid, gutter) / 2, margin-bottom);
          @include setPropWithRemAndPx(map-get($grid, gutter), margin-bottom);
          @include setPropWithRemAndPx(40, (width, height));
          svg {
            width: 100%;
            height: 100%;
            path {
              fill: $color-white;
            }
          }
        }
        &:hover,
        &:focus {
          font-weight: 700;
          text-decoration: none;
          .icon {
            transform: scale(1.3);
          }
        }
      }
    }
  }
}

.contact-item {
  &.wrapper {
    fieldset~.contact-button.container [variant~="contact-show"] {
      display: none;
    }
    fieldset~.contact-button.container [variant~="contact-edit"] {
      display: flex;
    }
    fieldset[disabled]~.contact-button.container [variant~="contact-show"] {
      display: flex;
    }
    fieldset[disabled]~.contact-button.container [variant~="contact-edit"] {
      display: none;
    }
  }
}
